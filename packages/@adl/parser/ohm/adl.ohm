ADL {
    Module =
         Annon* module scopedName "{" 
         idc
         Imports* Top* "}" ";"? -- module

    scopedName = (ident ".")* ident
    // scopedName = ident ("." ident)*
    scopedNameStar = ident ("." ident)* ".*"

    Imports =
        | import idc scopedNameStar idc ";"         -- module
        | import idc scopedName idc ";"             -- scopedName

    Annon =
        | #("@" scopedName) idc JsonValue?                                 -- local
        | doccomment+                                  -- doc

    Top =
        | RemoteAnnon   -- annon
        | Decl          -- decl

    RemoteAnnon =
        | annotation scopedName JsonValue ";"                                           -- ModuleAnnotation
        | annotation ident scopedName JsonValue ";"                                    -- DeclAnnotation
        | annotation ident "::" ident scopedName JsonValue ";"                               -- FieldAnnotation

    Decl =
        | Annon* struct     ident MVersion? TypeParam? "{" Fields* idc "}" ";"?                        -- Struct
        | Annon* union      ident MVersion? TypeParam? "{" Fields* "}" ";"?                         -- Union
        | Annon* type       ident MVersion? TypeParam? "=" TypeExpr  ";"                              -- Type
        | Annon* newtype    ident MVersion? TypeParam? "=" TypeExpr ("=" JsonValue)? ";"           -- Newtype

    MVersion =
        | "#" digit+                    -- mversion

    TypeParam =
        | "<" NonemptyListOf<ident, ","> ">"                                        -- TypeParameter

    TypeExpr =
        | scopedName "<" NonemptyListOf<TypeExpr, ","> ">"                          -- TypeExprGeneric
        | scopedName                                                                -- TypeExprSimple

    Fields =
        | Annon* TypeExpr ident ("=" JsonValue)? ";"                                   -- FieldStatement

    JsonValue =
        | string                                                                        -- StringStatement
        | multiLineStr -- mls
        | "true"                                                                        -- true
        | "false"                                                                       -- false
        | "null"                                                                        -- null
        | number                                                                        -- number
        | "[" ListOf<JsonValue, ","> "]"                                                -- ArrayStatement
        | "{" ListOf<JsonObj, ","> "}"                                                  -- ObjStatement

    JsonObj =
        | string ":" JsonValue                                                       -- JsonObjStatement

    module = "module" ~(letter | alnum)
    import = "import" ~(letter | alnum)
    annotation = "annotation" ~(letter | alnum)
    type = "type" ~(letter | alnum)
    newtype = "newtype" ~(letter | alnum)
    struct = "struct" ~(letter | alnum)
    union = "union" ~(letter | alnum)

    comment = "//" ~"/" (~"\n" any)* &("\n" | end)  -- singleLine
    
    idc = doccomment?
    doccomment =  "///" (~"\n" any)* "\n"
    space += comment 

    string = "\"" (~("\""| "\n") ("\\\"" | any))* "\""
    multiLineStr = "```" (~("\n" space* "```") any)* "\n" space* "```"
    
    number  (a number)
        = "-"? digit* "." digit+  -- fract
        | "-"? digit+             -- whole
    ident = letter (alnum| "_")*
}
