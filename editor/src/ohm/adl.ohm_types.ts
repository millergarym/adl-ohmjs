// AUTOGENERATED FILE
// This file was generated from adl.ohm by `ohm generateBundles`.

import {
  ActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface ADLActionDict<T> extends ActionDict<T> {
  Module_module?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: TerminalNode, arg4: IterationNode, arg5: IterationNode, arg6: TerminalNode, arg7: TerminalNode) => T;
  Module?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  scopedName?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: NonterminalNode) => T;
  scopedNameStar?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode, arg3: TerminalNode) => T;
  Imports_module?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Imports_scopedName?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Imports?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Annon_local?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode) => T;
  Annon_doc?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  Annon?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Top_annon?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Top_decl?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Top?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  RemoteAnnon_ModuleAnnotation?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  RemoteAnnon_DeclAnnotation?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode, arg4: TerminalNode) => T;
  RemoteAnnon_FieldAnnotation?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: TerminalNode, arg3: NonterminalNode, arg4: NonterminalNode, arg5: NonterminalNode, arg6: TerminalNode) => T;
  RemoteAnnon?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Decl_Struct?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: IterationNode, arg7: TerminalNode, arg8: TerminalNode) => T;
  Decl_Union?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: IterationNode, arg7: TerminalNode, arg8: TerminalNode) => T;
  Decl_Type?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: NonterminalNode, arg7: TerminalNode) => T;
  Decl_Newtype?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode, arg6: NonterminalNode, arg7: IterationNode, arg8: IterationNode, arg9: TerminalNode) => T;
  Decl?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  MVersion_mversion?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  MVersion?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  TypeParam_TypeParameter?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  TypeParam?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  TypeExpr_TypeExprGeneric?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  TypeExpr_TypeExprSimple?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  TypeExpr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Fields_FieldStatement?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: IterationNode, arg5: TerminalNode) => T;
  Fields?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  JsonValue_StringStatement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  JsonValue_true?: (this: NonterminalNode, arg0: TerminalNode) => T;
  JsonValue_false?: (this: NonterminalNode, arg0: TerminalNode) => T;
  JsonValue_null?: (this: NonterminalNode, arg0: TerminalNode) => T;
  JsonValue_number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  JsonValue_ArrayStatement?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  JsonValue_ObjStatement?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  JsonValue?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  JsonObj_JsonObjStatement?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  JsonObj?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  module?: (this: NonterminalNode, arg0: TerminalNode) => T;
  import?: (this: NonterminalNode, arg0: TerminalNode) => T;
  annotation?: (this: NonterminalNode, arg0: TerminalNode) => T;
  type?: (this: NonterminalNode, arg0: TerminalNode) => T;
  newtype?: (this: NonterminalNode, arg0: TerminalNode) => T;
  struct?: (this: NonterminalNode, arg0: TerminalNode) => T;
  union?: (this: NonterminalNode, arg0: TerminalNode) => T;
  comment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  doccomment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  space?: (this: NonterminalNode, arg0: NonterminalNode | TerminalNode) => T;
  string?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  number_fract?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode, arg2: TerminalNode, arg3: IterationNode) => T;
  number_whole?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  number?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ident?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
}

export interface ADLSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: ADLActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: ADLActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: ADLActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: ADLActionDict<T>): this;
}

export interface ADLGrammar extends Grammar {
  createSemantics(): ADLSemantics;
  extendSemantics(superSemantics: ADLSemantics): ADLSemantics;
}

declare const grammar: ADLGrammar;
export default grammar;

